bind ^
{   //define all the possible root values for the binding + all the operators that may follow the root value
   {
      //handles the first item in a thes path. Checks if it is a pos, if so, the pos is stored for further usage.
      //otherwise, the first items in the thes path are stored.
      get(var value): var
      //makes certain that the value is stored as a child of 'lastPathItem' from input.
      +=(var input, var value)
      //sub paths, like: ^noun.test define how to get and set a value + which operators can come after the getter.
      . ThesDot
      {       
         //returns the the thes child from 'input' with as text defined in 'value'
         get(var input, var value): var
         //makes certain that the value is stored as a child of 'lastPathItem' from input.
         +=(var input, var value)
         (ThesDot)
         (ThesIndex)
         (ThesOutLink)
         (ThesFunction)                                     //a reference to thes functions, they may also follow a 'dot. operator.
      }
      
      [] ThesIndex
      {
         //gets the value at the specified index.
         get(var input, int index): var
         //insert a value at the spefied index position
         +=(var input, int index, var value)
         (ThesDot)
         (ThesOutLink)
         (ThesFunction)
      }
      //outgoing links in thespaths are used to define conjugation values like 'plural', 'firstPersonPresent',..
      -> ThesOutLink
      {
         //gets the conjugation 
         get(var input, var outlinkmeaning): var
         //assigns a new value to the conjugation.
         set(var input, var outlinkmeaning, var value) 
         (ThesDot)
         (ThesIndex)
         (ThesOutLink)
         (ThesFunction)
      }
      
      //all the functions that can be called in a thes path.
      : ThesFunction                                         //all functions can also be used after a pos value?
      {
         //a function can be followed by all other parts.
         (ThesDot)
         (ThesIndex)
         (ThesOutLink)
         (ThesFunction)
         //Gets the immediate thesaurus parent from the input value. the 'isa' relationship is presumed.
         ThesParent(var input): var
         //Gets the immediate thesaurus parent from the input value. If no meaning is defined, the 'isa' relationship is presumed.
         ThesParent(var input, var meaning): var
         IsRelated(var input, var to, var relationship)
         //Tries to conjugatte the verb to the form that corresponds with the argument. The argument should be 1 item, usually  '#bot.MextMem.who.val'. No attempt is made to try to convert objects to conjugation mappings, all objects are treated as 'it'.
         ConjugateVerb(var input, var relativeTo):var
         //Tries to conjugatte the verb to the inverted form that corresponds with the argument (so 'you' becomes 'I'). The argument should be 1 item, usually  '#bot.MextMem.who.val'. No attempt is made to try to convert objects to conjugation mappings, all objects are treated as 'it'.
         ConjugateInvVerb(var input, var relativeTo): var
         //returns all the assets that directly link to the input as value. No effort is made to convert the value to object/text/posgroup, only a direct link is used.
         GetAssetsFromValue(var input): var
         //returns all the assets that directly link to the input as value for the specified attribute value. No effort is made to convert the value to object/text/posgroup, only a direct link is used.
         GetAssetsFromValue(var input, var attribVal): var
         //returns all the assets that directly link to the input as value.   No effort is made to convert the value to object/text/posgroup, only a direct link is used.
         FindAssetsFromValue(var input): var
         //returns all the assets that directly link to the input as value for the specified attribute value.  No effort is made to convert the value to object/text/posgroup, only a direct link is used.
         FindAssetsFromValue(var input, var attribVal): var
         //Returns the assets that have items with an attribute specified in the input.
         AttributeFor(var input): var
         //the attribute of the input should be calculated. This attribute can be used in an asset relationship. This is done by trying to find a thesaurus node that has a link to itself with the 'attribute' meaning.
         Attribute(var callbackIn): var
         //the attribute of the input should be calculated. This attribute can be used in an asset relationship. This is done by trying to find a thesaurus node that has a link to itself with the 'attribute' meaning.
         //The callback can supply argumetns, which will be used as 'context'. The closer a result matches one of the context values, the higher the weight of the result will be.
         Attribute(var callbackIn, var context): var
         //Returns true if the input (which should be a cluster in some form) contains any of the specified arguments as child. The arguments can be objects or text, automatic conversion is done.
         ContainsChild(var list, var child): bool
         /* Converts the input into an asset, taking into account for 'I', 'you', 'he/she', 'it', 'plural', 'singular', 'male', 'female'. If the input can't be mapped to 'I', you,... it is interpreted as the name of something and will try to find a focused object that has the specified name.
            I and you are first inverted, so I is interpreted as the user, while 'you' is interpreted as the bot.
            Input has to be objects, with at least 1 thesaurus parent to perform the mappings. */
         ObjectToAsset(var input): var
         /* Converts the input into an asset, taking into account for 'I', 'you', 'he/she', 'it', 'plural', 'singular', 'male', 'female'. If the input can't be mapped to 'I', you,... it is interpreted as the name of something and will try to find a focused object that has the specified name.
            I and you are first inverted, so I is interpreted as the user, while 'you' is interpreted as the bot.
            Input has to be objects, with at least 1 thesaurus parent to perform the mappings. */ 
         ObjectToAsset(var input, var context): var
         //same as ObjectToAsset, for legacy.
         ResolvePerson(var input): var
         //same as ObjectToAsset, for legacy.
         ResolvePerson(var input, var context): var
         //inverts I and You
         InvertPerson(var toInvert): var
         //switches I and he/she 
         InvertPerson2(var toInvert): var
         //checks if the item in the argument is a thesaurus child (with the 'is a' relationship) of the path. 
         IsaOf(var input, var toCheck): bool
      }
   }
}
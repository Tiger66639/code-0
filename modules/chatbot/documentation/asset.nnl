bind # 
{   //root
   {  
      //for things like #xx  where xx = value
      get(var value): var
      (SubFunctions)
      
      //provides access to the user.
      User
      {
         //get the asset for the current user.
         get(): var
         //removes all asset items for the specified attribute.
         -=(var asset, var attrib)
         //adds a new asset as a child of the specified asset, with the specified attribute
         +=(var asset, var attrib)
         (SubValues)
         (SubFunctions)
         (AssetIndex)
      }
      Bot
      {
         //get the asset for the bot.
         get(): var
        //removes all asset items for the specified attribute.
         -=(var asset, var attrib)
         //adds a new asset as a child of the specified asset, with the specified attribute
         +=(var asset, var attrib)
         (SubValues)
         (SubFunctions)
         (AssetIndex)
      }
      //adds a new asset as a child of the specified asset, with the specified attribute
      +=(var asset, var attrib)
      //removes all asset items for the specified attribute.
      -=(var asset, var attrib)

      . SubValues
      {
         //returns the value for the specified attribute
         get(var from, var attrib): var
         //assign a value, create an attribute-value pair and add it to the asset.
         //if the asset already had a value for the specified attribute, this gets removed first
         set(var asset, var attrib, var value)
         //add the value to the asset for the specified attribute. If there already is a value, a bag will be created with all the values. The bag is a cluster with meaning Statics.List
         ;=(var asset, var attrib, var value)
         //creates a new asset object and adds it to the asset.
         +=(var asset, var attrib)
         //removes all asset items for the specified attribute.
         -=(var asset, var attrib)
         //to what is it done? (object) (whome if it is a person, otherwise 'what').
         What
         {
            //get the value attached to the current elemetn for 'what'
            get(var asset): var
            //sets a value for 'what'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }
          
         how
         {
            //get the value attached to the current elemetn for 'how'
            get(var asset): var
            //sets a value for 'how'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }
         //who does it. (subject)
         who
         {
            //get the value attached to the current elemetn for 'Who'
            get(var asset): var
            //sets a value for 'Who'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }
         
         Then
         {
            //get the value attached to the current elemetn for 'Then'
            get(var asset): var
            //sets a value for 'Then'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }
         
         //why was it done (motivation)
         why
         {
            //get the value attached to the current elemetn for 'why'
            get(var asset): var
            //sets a value for 'why'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }
         
         //where was it done (location)
         where
         {
            //get the value attached to the current elemetn for 'where'
            get(var asset): var
            //sets a value for 'where'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }

         //When was it done (time)
         When
         {
            //get the value attached to the current elemetn for 'When'
            get(var asset): var
            //sets a value for 'When'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }   
         /* extra information about the asset item (data like adverb). This uses the 'child of Asset' to get the item. If no item is found, a new asset cluster is created and added as link (meaning 'where')
            Warning: when a new asset cluster is created, this is not frozen, cause asset paths are usually solved in a seperate thread.
            This is only used for assets */ 
         Extra
         {
            //get the value attached to the current elemetn for 'When'
            get(var asset): var
            //sets a value for 'When'
            set(var asset, var value)
            (SubValues)
            (SubFunctions)
            (AssetIndex)
         }   

         :SubFunctions
         {
            //adds the value to the asset and makes certain it is set to 'isnot'
            SetIsNot(var asset, var attrib, var value)
            //adds the value to the asset and makes certain it is set to 'Hasnot'
            SetHasNot(var asset, var attrib, var value)
            //returns either the name of the attribute or the value (of the last  item).
            NameOrValue(var value): var            
            //get the seconds section from a time value
            second(var callbackIn): int
            //get the hours section from a time value
            hour(var callbackIn): int
            //get the hours section from a time value expressed in the 12H system
            hour12(var callbackIn): int
            //returns either AM or PM depending on the hour.
            AMPM(var callbackIn): var
            //get the minutes section from a time value
            minute(var callbackIn): int
            //get the year section from a time value
            year(var callbackIn): int
            //get the day section from a time value
            day(var callbackIn): int
            //get the month section from a time value
            month(var callbackIn): int
            //get the day of the week section from a time value
            dayofweek(var callbackIn): int
            //used in a variable path to indicate that the count of the input set should be returned.
            Count(var callbackIn): int
            //used in a variable path to indicate that a new value should be generated/calculated that completes the input set.
            complete(var callbackIn): var
            //performs an interleaf where each item to interleaf is the same
            //used to create things like 'a, b, c'
            Interleave(var value, var toInsert): var
            //performs an interleaf where the last item to interleaf is another item
            //used to create things like 'a, b, c and d'
            Interleave(var value, var toInsert, var toInsertAtEnd): var
             //Checks if the input is an object, compound, textneuron or Statics.PosGroup and returns true or false. There can be no more items after this path item.  
            IsAbstract(var callbackin): bool
            //Checks if the input is a concrete item (asset) and returns true or false. There can be no more items after this path item. 
            IsConcrete(var callbackin): bool
            //the attribute of the input should be calculated. This attribute can be used in an asset relationship. This is done by trying to find a thesaurus node that has a link to itself with the 'attribute' meaning.
            Attribute(var callbackIn): var
            //the attribute of the input should be calculated. This attribute can be used in an asset relationship. This is done by trying to find a thesaurus node that has a link to itself with the 'attribute' meaning.
            //The callback can supply argumetns, which will be used as 'context'. The closer a result matches one of the context values, the higher the weight of the result will be.
            Attribute(var callbackIn, var context): var
            //Gets the immediate thesaurus parent from the input value. the 'isa' relationship is presumed.
            ThesParent(var input): var
            //Gets the immediate thesaurus parent from the input value. If no meaning is defined, the 'isa' relationship is presumed.
            ThesParent(var input, var meaning): var
            //returns the attribute part of the asset item instead of the value.
            Property(var input): var
            //Checks if the argument is registered as 'not'. This can only be done for asset data., so CallbackIn must be the result of an assetquery. The value is actually retrieved from 'child of asset' cause this is the asset item that references 'callbackIn' and which defines the 'not' value. this is a terminator (an Addsplitresult is done with exit solve)
            IsNot(var input): bool
            //Checks if the argument is registered as 'not'. This can only be done for asset data., so CallbackIn must be the result of an assetquery. The value is actually retrieved from 'child of asset' cause this is the asset item that references 'callbackIn' and which defines the 'not' value. this is a terminator (an Addsplitresult is done with exit solve)
            HasNot(var input): bool
             /* converts to input from an asset to a child of the argument.
               input: an asset
               argument: a thesaurus item, (like adj.possesive).
               Output: a child of the thesaurus item that maps to the argument (I, you, ... */
            AssetToThes(var input, var thesValue): var
            //for legacy, see AssetToThes
            ToPerson(var input, var thesValue): var
             /* Converts the input into an asset, taking into account for 'I', 'you', 'he/she', 'it', 'plural', 'singular', 'male', 'female'. If the input can't be mapped to 'I', you,... it is interpreted as the name of something and will try to find a focused object that has the specified name.
               I and you are first inverted, so I is interpreted as the user, while 'you' is interpreted as the bot.
               Input has to be objects, with at least 1 thesaurus parent to perform the mappings. */
            ObjectToAsset(var input): var
            /* Converts the input into an asset, taking into account for 'I', 'you', 'he/she', 'it', 'plural', 'singular', 'male', 'female'. If the input can't be mapped to 'I', you,... it is interpreted as the name of something and will try to find a focused object that has the specified name.
               I and you are first inverted, so I is interpreted as the user, while 'you' is interpreted as the bot.
               Input has to be objects, with at least 1 thesaurus parent to perform the mappings. */
            ObjectToAsset(var input, var context): var
            //same as ObjectToAsset, for legacy.
            ResolvePerson(var input): var
            //same as ObjectToAsset, for legacy.
            ResolvePerson(var input, var context): var
            //Tries to conjugatte the verb to the form that corresponds with the argument. The argument should be 1 item, usually  '#bot.MextMem.who.val'. No attempt is made to try to convert objects to conjugation mappings, all objects are treated as 'it'.
            ConjugateVerb(var input, var relativeTo):var
            //Tries to conjugatte the verb to the inverted form that corresponds with the argument (so 'you' becomes 'I'). The argument should be 1 item, usually  '#bot.MextMem.who.val'. No attempt is made to try to convert objects to conjugation mappings, all objects are treated as 'it'.
            ConjugateInvVerb(var input, var relativeTo): var            
            //Checks if the current input is a list and returns true or false. There can be no more items after this path item.
            Islist(var input):bool
            //Checks if the current asset-path result is an 'And' cluster and returns true or false. There can be no more items after this path item.
            IsAnd(var input): bool
            //Checks if the current asset-path result is an 'or' cluster and returns true or false. There can be no more items after this path item.
            IsOr(var input): bool
            //returns all the assets that directly link to the input as value.   No effort is made to convert the value to object/text/posgroup, only a direct link is used.
            GetAssetsFromValue(var input): var
            //returns all the assets that directly link to the input as value for the specified attribute value.  No effort is made to convert the value to object/text/posgroup, only a direct link is used.
            GetAssetsFromValue(var input, var attribVal): var
            //returns all the assets that directly link to the input as value.   No effort is made to convert the value to object/text/posgroup, only a direct link is used.
            FindAssetsFromValue(var input): var
            //returns all the assets that directly link to the input as value for the specified attribute value.  No effort is made to convert the value to object/text/posgroup, only a direct link is used.
            FindAssetsFromValue(var input, var attribVal): var
            //Returns the assets that have items with an attribute specified in the input.
            AttributeFor(var input): var
            //Returns true if the input (which should be a cluster in some form) contains any of the specified arguments as child. The arguments can be objects or text, automatic conversion is done.
            ContainsChild(var list, var child): bool
            // Takes in many possible values (asset clusters), and returns those who have an  outgoing-link with the data specified in the arguments.  
            Filter(var input, var outgoing): var
            //checks if the item in the argument is a thesaurus child (with the 'is a' relationship) of the path.
            IsaOf(var input, var toCheck): bool
         }
         
         (SubValues)
         (AssetIndex)
      }
      [] AssetIndex
      {
         //gets the item at the specified index.
         get(var asset, int index): var
         (SubFunctions)
         (SubValues)
      }
   }
}
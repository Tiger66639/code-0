<ResourceDictionary x:Class="JaStDev.HAB.Designer.DebugResources"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:self="clr-namespace:JaStDev.HAB.Designer"
                    xmlns:cf="http://schemas.jastdev.ControlFramework/winfx/2007/xaml/presentation"
                    xmlns:Ctrls="clr-namespace:JaStDev.HAB.Designer.WPF.Controls"
                    xmlns:col="clr-namespace:System.Collections;assembly=mscorlib"
                    xmlns:kb="http://kent.boogaart/controls">
    <!--A dictionary containing resources used for debugging purposes.-->


    <!--We have to duplicate these 2 items (with App.xaml) cause they have mergedDicts have to be the first in the list.-->
    <BooleanToVisibilityConverter x:Key="BoolToVisConv" />
    <self:NeuronToInfoConverter x:Key="NeuronToInfoConv" />

    <Style TargetType="{x:Type Image}"
           x:Key="DebugNeuronImageStyle">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Stretch" Value="Uniform" />
    </Style>

    <Style TargetType="{x:Type TextBlock}"
           x:Key="DebugNeuronImageOverlayStyle">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Foreground" Value="Red" />
    </Style>

    <HierarchicalDataTemplate DataType="{x:Type self:DebugNeuronChildren}"
                              x:Key="DebugNeuronChildrenTemplate"
                              ItemsSource="{Binding Path=Children}"
                              ItemTemplate="{x:Null}">
        <!--Note: we reset the ItemTeplate to null, so that it uses the default types instead of an inherited template -->
        <TextBlock Text="{Binding Path=Name}" />
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type self:DebugLink}"
                              ItemsSource="{Binding Path=PointsTo.ChildLists}"
                              ItemTemplate="{StaticResource DebugNeuronChildrenTemplate}">
        <StackPanel Orientation="Horizontal">
            <!--extra panel, for focus handling: so we can expand the item after the text and select the text as well.-->
            <StackPanel Orientation="Horizontal"
                        Background="Transparent"
                        Focusable="True"
                        PreviewMouseDown="BD_MouseDown">
                <StackPanel.InputBindings>
                    <!--We redeclare the sync command cause we need to provide the commandparameter since the DebugChild is not an INeuronWrapper, but simply has a prop that points to another debugNeuron-->
                    <KeyBinding CommandParameter="{Binding Path=PointsTo.Item}"
                                Command="self:App.SyncCmd"
                                Key="F4" />
                </StackPanel.InputBindings>
                <TextBlock Margin="4,0,0,0"
                           Text="{Binding Path=Item.Meaning, Converter={StaticResource NeuronToInfoConv}, StringFormat={}[{0}]}"
                           ToolTip="{Binding Path=Item.Meaning.ID}" />
                <Image Source="{Binding Path=PointsTo.Item, Converter={StaticResource NeuronToImgConv}}"
                       ToolTip="{Binding Path=PointsTo.NeuronTypeName}"
                       Style="{StaticResource DebugNeuronImageStyle}" />
                <TextBlock Text="{Binding Path=PointsTo.NeuronInfo}"
                           ToolTip="{Binding Path=PointsTo.Item.ID}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"
                        x:Name="ClusterMeaningPart"
                        Visibility="Collapsed">
                <TextBlock>(</TextBlock>
                <ContentPresenter Content="{Binding Path=PointsTo.ClusterMeaning}" />
                <TextBlock>)</TextBlock>
            </StackPanel>
        </StackPanel>
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=PointsTo.IsNeuronCluster}" Value="True">
                <Setter TargetName="ClusterMeaningPart" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type self:DebugChild}"
                              ItemsSource="{Binding Path=PointsTo.ChildLists}"
                              ItemTemplate="{StaticResource DebugNeuronChildrenTemplate}">
        <StackPanel Orientation="Horizontal">
            <StackPanel Orientation="Horizontal"
                        Background="Transparent"
                        Focusable="True"
                        PreviewMouseDown="BD_MouseDown">
                <StackPanel.InputBindings>
                    <!--We redeclare the sync command cause we need to provide the commandparameter since the DebugChild is not an INeuronWrapper, but simply has a prop that points to another debugNeuron-->
                    <KeyBinding CommandParameter="{Binding Path=PointsTo.Item}"
                                Command="self:App.SyncCmd"
                                Key="F4" />
                </StackPanel.InputBindings>
                <Image Source="{Binding Path=PointsTo.Item, Converter={StaticResource NeuronToImgConv}}"
                       ToolTip="{Binding Path=PointsTo.NeuronTypeName}"
                       Style="{StaticResource DebugNeuronImageStyle}" />
                <TextBlock Text="{Binding Path=PointsTo.NeuronInfo}"
                           ToolTip="{Binding Path=PointsTo.Item.ID}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"
                        x:Name="ClusterMeaningPart"
                        Visibility="Collapsed">
                <TextBlock>(</TextBlock>
                <ContentPresenter Content="{Binding Path=PointsTo.ClusterMeaning}" />
                <TextBlock>)</TextBlock>
            </StackPanel>
        </StackPanel>
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=PointsTo.IsNeuronCluster}" Value="True">
                <Setter TargetName="ClusterMeaningPart" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>


    <PathGeometry x:Key="DebugItemTreeArrow">
        <PathGeometry.Figures>
            <PathFigureCollection>
                <PathFigure IsFilled="True" StartPoint="0 0" IsClosed="True">
                    <PathFigure.Segments>
                        <PathSegmentCollection>
                            <LineSegment Point="0 6" />
                            <LineSegment Point="6 0" />
                        </PathSegmentCollection>
                    </PathFigure.Segments>
                </PathFigure>
            </PathFigureCollection>
        </PathGeometry.Figures>
    </PathGeometry>
    <Style x:Key="DebugItemExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16"
                            Height="16"
                            Background="Transparent"
                            Padding="5,5,5,5">
                        <Path x:Name="ExpandPath"
                              Fill="Transparent"
                              Stroke="#FF989898"
                              Data="{StaticResource DebugItemTreeArrow}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135"
                                                 CenterX="3"
                                                 CenterY="3" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="Transparent" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DebugNeuronChildTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding Path=IsLoaded, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Style="{StaticResource DebugItemExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                      Visibility="{Binding Path=HasChildren, Converter={StaticResource BoolToVisConv}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate DataType="{x:Type self:DebugNeuron}">
        <Grid Background="Transparent"
              Focusable="True"
              MouseDown="BD_MouseDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="19" Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander"
                          Style="{StaticResource DebugItemExpandCollapseToggleStyle}"
                          ClickMode="Press" />
            <Border x:Name="BD"
                    Grid.Column="1">
                <StackPanel Orientation="Horizontal"
                            x:Name="MainPanel">
                    <Grid>
                        <Image Source="{Binding Path=Item, Converter={StaticResource NeuronToImgConv}}"
                               ToolTip="{Binding Path=NeuronTypeName}"
                               Style="{StaticResource DebugNeuronImageStyle}" />
                        <TextBlock Style="{StaticResource DebugNeuronImageOverlayStyle}"
                                   x:Name="TxtIsDeleted"
                                   Visibility="Collapsed"
                                   ToolTip="This neuron has been deleted">
                            x
                        </TextBlock>
                    </Grid>
                    <TextBlock Text="{Binding Path=NeuronInfo}"
                               ToolTip="{Binding Path=Item.ID}" />
                    <StackPanel Orientation="Horizontal"
                                x:Name="ClusterMeaningPart"
                                Visibility="Collapsed">
                        <TextBlock>(</TextBlock>
                        <ContentPresenter Content="{Binding Path=ClusterMeaning, Mode=OneWay}" />
                        <TextBlock>)</TextBlock>
                    </StackPanel>
                    <Popup AllowsTransparency="True"
                           PlacementTarget="{Binding ElementName=MainPanel}"
                           IsOpen="{Binding ElementName=Expander, Path=IsChecked, Mode=TwoWay}"
                           KeyboardNavigation.ControlTabNavigation="Contained"
                           Placement="Bottom"
                           StaysOpen="False"
                           x:Name="ThePopup"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <TreeView x:Name="trv"
                                  ItemsSource="{Binding Path=ChildLists}"
                                  ItemTemplate="{StaticResource DebugNeuronChildrenTemplate}"
                                  ItemContainerStyle="{StaticResource DebugNeuronChildTreeViewItem}" />
                    </Popup>
                </StackPanel>
            </Border>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter TargetName="BD" Property="BorderBrush" Value="Black" />
                <Setter TargetName="BD" Property="BorderThickness" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDeleted}" Value="True">
                <Setter TargetName="TxtIsDeleted" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsNeuronCluster}" Value="True">
                <Setter TargetName="ClusterMeaningPart" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--The default template, should be replaced by the FastDebugNeuron template (when possible), since this is able to handle big 
   datasets better. This template should be changed into something simpler, without tree so that it can still be used but can't
   crache the system.-->
    <DataTemplate DataType="{x:Type self:DebugNeuron}"
                  x:Key="OldDebugNeuronTemplate">
        <TreeView x:Name="trv"

                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ScrollViewer.VerticalScrollBarVisibility="Disabled">
            <TreeView.Style>
                <Style TargetType="{x:Type TreeView}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TreeView}">
                                <Border Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="true">
                                    <ItemsPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter TargetName="Bd" Property="Background"
                                                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TreeView.Style>
            <TreeViewItem ItemsSource="{Binding Path=ChildLists}"
                          ItemTemplate="{StaticResource DebugNeuronChildrenTemplate}"
                          IsExpanded="{Binding Path=IsExpanded, Mode=TwoWay}"
                          ItemContainerStyle="{StaticResource DebugNeuronChildTreeViewItem}">
                <TreeViewItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Grid>
                            <Image Source="{Binding Path=Item, Converter={StaticResource NeuronToImgConv}}"
                                   ToolTip="{Binding Path=NeuronTypeName}"
                                   Style="{StaticResource DebugNeuronImageStyle}" />
                            <TextBlock Style="{StaticResource DebugNeuronImageOverlayStyle}"
                                       x:Name="TxtIsDeleted"
                                       Visibility="Collapsed"
                                       ToolTip="This neuron has been deleted">
                                x
                            </TextBlock>
                        </Grid>
                        <TextBlock Text="{Binding Path=NeuronInfo}"
                                   ToolTip="{Binding Path=Item.ID}" />
                        <StackPanel Orientation="Horizontal"
                                    x:Name="ClusterMeaningPart"
                                    Visibility="Collapsed">
                            <TextBlock>(</TextBlock>
                            <ContentPresenter Content="{Binding Path=ClusterMeaning, Mode=OneWay}" />
                            <TextBlock>)</TextBlock>
                        </StackPanel>
                    </StackPanel>
                </TreeViewItem.Header>
            </TreeViewItem>
        </TreeView>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter TargetName="trv" Property="BorderBrush" Value="Black" />
                <Setter TargetName="trv" Property="BorderThickness" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDeleted}" Value="True">
                <Setter TargetName="TxtIsDeleted" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsNeuronCluster}" Value="True">
                <Setter TargetName="ClusterMeaningPart" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <!--The normal template for debug neurons. When used in a virtualized treeview, this can handle large datasets.-->
    <HierarchicalDataTemplate x:Key="FastDebugNeuronTemplate"
                              ItemContainerStyle="{StaticResource DebugNeuronChildTreeViewItem}"
                              ItemsSource="{Binding Path=ChildLists}"
                              ItemTemplate="{StaticResource DebugNeuronChildrenTemplate}">
        <Border x:Name="BD">
            <StackPanel Orientation="Horizontal">
                <StackPanel Orientation="Horizontal"
                            Background="Transparent"
                            Focusable="True"
                            MouseDown="BD_MouseDown">
                    <Grid>
                        <Image Source="{Binding Path=Item, Converter={StaticResource NeuronToImgConv}}"
                               ToolTip="{Binding Path=NeuronTypeName}"
                               Style="{StaticResource DebugNeuronImageStyle}" />
                        <TextBlock Style="{StaticResource DebugNeuronImageOverlayStyle}"
                                   x:Name="TxtIsDeleted"
                                   Visibility="Collapsed"
                                   ToolTip="This neuron has been deleted">
                            x
                        </TextBlock>
                    </Grid>
                    <TextBlock Text="{Binding Path=NeuronInfo}"
                               ToolTip="{Binding Path=Item.ID}" />
                </StackPanel>
                <StackPanel Orientation="Horizontal"
                            x:Name="ClusterMeaningPart"
                            Visibility="Collapsed">
                    <TextBlock>(</TextBlock>
                    <ContentPresenter Content="{Binding Path=ClusterMeaning, Mode=OneWay}" />
                    <TextBlock>)</TextBlock>
                </StackPanel>
            </StackPanel>
        </Border>
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter TargetName="BD" Property="BorderBrush" Value="Black" />
                <Setter TargetName="BD" Property="BorderThickness" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDeleted}" Value="True">
                <Setter TargetName="TxtIsDeleted" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsNeuronCluster}" Value="True">
                <Setter TargetName="ClusterMeaningPart" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>


    <!--The normal style for TreeViewItems  that contain debugNeurons.-->
    <Style x:Key="FastDebugNeuronStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
    </Style>

    <!--The normal style for treeviews that depict DebugNeurons-->
    <Style x:Key="FastDebugNeuronTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="ItemTemplate" Value="{StaticResource FastDebugNeuronTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource FastDebugNeuronStyle}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>